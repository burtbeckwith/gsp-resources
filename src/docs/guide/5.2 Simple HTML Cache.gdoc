One potential use of the @gsp-resources@ plugin is to cache the HTML output
of some controller action as a static @.html@ file. Note that the @.html@ file
will be created on server startup, and will not change after that.

h4. Example

We are going to cache the output of @http://localhost:8080/myapp/about/me@

h4. 1. Create a new directory under @web-app@

We will use @web-app/cache@ in this example, but any directory name is fine.

h4. 2. Configure resources plugin to include new directory

Make the following change to @grails-app/conf/Config.groovy@

{code}
// Note we have added '/cache/*' to the existing list
grails.resources.adhoc.patterns = ['/images/*', '/css/*', '/js/*', '/plugins/*', '/cache/*']
{code}

h4. 3. Configure resources plugin to delay processing

Make the following change to @grails-app/conf/Config.groovy@

{code}
grails.resources.processing.startup = "delayed"
{code}

h4. 4. Create GSP to cache controller output

Add the below content to @web-app/cache/aboutme.html.gsp@

{code}
<g:include controller="about" action="me"/>
{code}

h4. 5. Add new GSP to @resources@ plugin configuration

Make the following change to @grails-app/conf/ApplicationResources.groovy@

{code}
modules = {
    aboutme {
        resource url:'/cache/aboutme.html.gsp'
    }
}
{code}

h4. 6. Check results

You should now be able to view the cached file at
@http://localhost:8080/myapp/cache/aboutme.html@

{note}
You will need to restart your server first, so that the @resources@ plugin incorporates
the config change setting made in Step #2. Unfortunately, the current version of
@resources@ (v1.2) cannot hotload changes to this setting.

Note, this server restart is only required once - i.e. when first adding the new
@/cache/*@ adhoc pattern to the resources config. From then on, the @resources@ plugin
will automatically intercept URLs of the form @myapp/cache@ and map them to the actual
URL of the requested resource.
{note} 
